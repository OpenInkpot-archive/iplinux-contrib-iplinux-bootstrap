#!/bin/sh -e

VERSION=0.3

DEBIAN_SUITE=lenny

GPG_KEY=http://ftp.iplinux.org/gpgkey

PATH=$PATH:libshell
. shell-error
. shell-getopt

#
# Probably need to be configurable in future
#

host_components="host/tools host/cross"
host_packages="dpkg-cross slind-control"

# ---

# Our little config.guess
guess_hostarch() {
    if [ $(uname -s) != "Linux" ]; then
        echo unknown
        return
    fi
    case "$(uname -m)" in
        i?86|pentium*) echo i386;;
        x86_64)        echo amd64;;
        *)             echo unknown;;
    esac
}

hostarch() {
    dpkg --print-architecture 2>/dev/null || guess_hostarch
}

#
# Bootstraps chroot and performs configuration enough to run $work_dir/enter
#
generate_chroot() {
    echo "== Generating chroot (1/5) =="
    $root_cmd sh -c "$chroot_env debootstrap/debootstrap --include=sudo --arch=$chroot_arch $DEBIAN_SUITE $work_dir $debian_mirror"
    if [ "$?" != 0 ]; then
        echo "Failed to bootstrap $DEBIAN_SUITE from $debian_mirror to $work_dir"
        exit 1
    fi

    # -- hostname (for sudo) --

    HOSTNAME=$(hostname)
    $root_sh "echo 127.0.0.1 localhost $HOSTNAME >> $work_dir/etc/hosts"

    # -- 'build' user --

    [ -n "$UID" ] || UID=`id -u`

    $root_cmd $chroot_cmd $work_dir /usr/sbin/adduser --home /build --uid $UID --disabled-password --disabled-login --gecos 'IPlinux build user' build

    # -- sudo --

    TMPFILE=$(mktemp)
    echo "Defaults env_keep+=http_proxy, env_keep+=ftp_proxy" > $TMPFILE
    echo "build ALL=(ALL) NOPASSWD:ALL" >> $TMPFILE
    $root_cmd mv $TMPFILE $work_dir/etc/sudoers
    $root_cmd chown root:root $work_dir/etc/sudoers
    $root_cmd chmod 440 $work_dir/etc/sudoers

    # -- $work_dir/enter --

    TMPFILE=$(mktemp)
    sed -e "s,@@CHROOT_PATH@@,$work_dir,g" \
        -e "s,@@HTTP_PROXY@@,$http_proxy,g" \
        -e "s,@@FTP_PROXY@@,$ftp_proxy,g" < enter.in > $TMPFILE
    $root_cmd mv $TMPFILE $work_dir/enter
    $root_cmd chmod +x $work_dir/enter

}

populate_chroot() {
    echo "== Populating chroot (2/5) =="

    # -- sources.list --

    TMPFILE=$(mktemp)
    echo "deb $debian_mirror $DEBIAN_SUITE main" > $TMPFILE
    echo "deb $mirror $suite $host_components" >> $TMPFILE
    $root_cmd mv $TMPFILE $work_dir/etc/apt/sources.list

    # -- GPG key --

    $work_dir/enter sh -c "wget -O- $GPG_KEY | sudo apt-key add -"

    # -- packages --

    $work_dir/enter sudo apt-get update
    $work_dir/enter sudo apt-get dist-upgrade --yes --force-yes
    $work_dir/enter sudo apt-get install --yes --force-yes $host_packages
}

configure_chroot() {
    echo "== Configuring chroot (3/5) =="

    TMPFILE=$(mktemp)
    echo "SUITE=$suite
REPO=$mirror
ROOT_CMD=sudo"  > $TMPFILE
    $root_cmd mv $TMPFILE $work_dir/etc/cross-shell/config
}

bootstrap_host() {
    echo "== Bootstraping host (4/5) =="
    $work_dir/enter sc-bootstrap-host
}

bootstrap_target() {
    echo "== Bootstrapping targets (5/5) =="
    for arch in "$@"; do
        echo "--> $arch"
        $work_dir/enter sc-bootstrap-target $arch
    done
}

hint_chroot() {
    echo
    echo
    echo "You can enter newly created IPlinux build environment by issuing"
    echo "the following command:"
    echo "    $work_dir/enter"
    echo
    echo
}

usage() {
    echo "Usage: ${0##*/} [OPTION]... <target-dir>"
    echo "Bootstrap IPlinux devenv chroot"
    echo
    cat <<EOF
      -h|--help             display this help and exit
      -V|--version          display version information and exit
      -v|--verbose          don't turn off the output of tools

      --http-proxy=P        use proxy to obtain packages and
      --ftp-proxy=P         in build system created

      --debian-mirror=U     debian mirror to use. this should be
                            an URL understandable by debootstrap
                            (defaults to '$debian_mirror')
      --mirror=U            iplinux mirror to use
                            (defaults to '$mirror')
      --suite=S             iplinux suite to use
                            (defaults to '$suite')
      --target-archs=A,B... target architectures (defaults to '$target_archs')

      --root-cmd=C          command to gain root (defaults to '$root_cmd')

EOF
}

export LC_ALL=C
	
TMP=$(getopt --long help,version,verbose,http-proxy:,ftp-proxy:,debian-mirror:,mirror:,suite:,root:,target-archs:,no-bootstrap-rootfs,root-cmd: -o hvV -- "$@")

if [ $? != 0 ]; then
    exit 1
fi

eval set -- "$TMP"

debian_mirror=http://ftp.de.debian.org/debian/
mirror=http://ftp.iplinux.org/iplinux/
suite=asimov
root_cmd=sudo
chroot_env=
target_archs=armel

while true; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -V|--version)
            echo "iplinux-bootstrap $VERSION"
            exit 0
            ;;
        -v|--verbose)
            verbose=true
            export verbose
            shift
            ;;
        --http-proxy)
            http_proxy="$2"
            chroot_env="$chroot_env http_proxy=$2"
            shift 2
            ;;
        --ftp-proxy)
            ftp_proxy="$2"
            chroot_env="$chroot_env ftp_proxy=$2"
            shift 2
            ;;
        --debian-mirror)
            debian_mirror="$2"
            shift 2
            ;;
        --mirror)
            mirror="$2"
            shift 2
            ;;
        --suite)
            suite="$2"
            shift 2
            ;;
        --target-archs)
            target_archs="$2"
            shift 2
            ;;
        --no-bootstrap-rootfs)
            no_bootstrap_rootfs=1
            shift
            ;;
        --root-cmd)
            root_cmd="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Unexpected argument in arguments list: $1"
            exit 1
            ;;
    esac
done

if [ $# != 1 ]; then
    usage
    exit 0
fi

case "$1" in
    /*) work_dir="$1";;
    *)  work_dir=$(pwd)/$1;;
esac

root_sh="$root_cmd sh -c"

case "$(hostarch)" in
    i386|amd64)
        chroot_cmd="chroot"
        chroot_arch=$(hostarch)
        ;;
    *)
        echo "Unable to detect the host architecture. Please file a bug report with output of"
        echo "* dpkg --print-architecture (if you use a Debian-based system)"
        echo "* uname -s; uname -m (in all other cases)"
        exit 1
esac

trap check_ok 0
check_ok() {
    RET=$?
    if [ $RET -ne 0 ]; then
        echo "Chroot generation failed"
    fi
    exit $RET
}

echo
echo "*** If script bails off without \"You can enter newly created...\", then it broke."
echo

generate_chroot
populate_chroot
configure_chroot
if [ -z "$no_bootstrap_rootfs" ]; then
    bootstrap_host
    bootstrap_target $target_archs
fi

hint_chroot
